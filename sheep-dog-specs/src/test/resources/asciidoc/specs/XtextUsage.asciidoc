I’m gradually trying to make the experience of writing test cases the
same as when I code when it comes to IDE features that make coding
easier. I’ve put these screenshots here to show how the DSL editor
compares to the Java editor in Eclipse. The Xtext framework lets you map
the DSL to Java so that you can generate the Java code with minimal
coding. I think that’s useful for a tester if every component is written
in Java. If it’s not, and there’s PL/SQL, COBOL, webMethods, Layer 7 and
other such languages, you might not need Java code but insert statements
for example. In that case, generating Java code isn’t that useful so I
generate the lower layers describing each object.

=== Content Assist

When I start writing tests I use content assist. You can customise the
code to suggest whatever you want, like an entire test case. For example
if you type out a comment, and ask for a suggestion by pressing
CTRL{plus}SPACE, you could use that comment to generate a test case
using MBT or AI. I’ll probably implement that later.

==== Propose applications for which there are keywords

.image
image::https://github.com/user-attachments/assets/2b144b36-a133-43f0-af2b-9fdecf1a2903[image]

==== Propose objects for that application

.image
image::https://github.com/user-attachments/assets/8c95c393-58e1-44e4-ab71-b404211a12c9[image]

==== Propose keywords for that object

.image
image::https://github.com/user-attachments/assets/7025fae1-28d7-457c-a0c6-b762ee75acfb[image]

==== Propose combinations of attributes for that keyword

.image
image::https://github.com/user-attachments/assets/8e7cbb14-4d87-4ddc-a086-5228798ca260[image]

==== Propose types for components and objects

.image
image::https://github.com/user-attachments/assets/a82e3fd3-0cfa-4c11-99b3-6549460462a7[image]

=== Validation

When writing a new test step, you get feedback through validation as you
type like referencing an object that doesn’t exist. The check can be a
warning or an error. You can also trigger slower validation using the
Validate menu item.

.image
image::https://github.com/user-attachments/assets/f073bd97-a5be-488c-80bd-f79f66a92089[image]

==== Component and Object validation

All test steps need to specify the object and optionally its path and
component. Think of this as specifying the fully qualified name of an
object in a jar file.

.image
image::https://github.com/user-attachments/assets/84f363a2-4221-473c-a7bf-3da991bd40c5[image]

.image
image::https://github.com/user-attachments/assets/150c199a-6064-4d39-924a-a6e554142ef4[image]

==== Predicate validation

This is the remainder of the step, you can think of it as a method call.

.image
image::https://github.com/user-attachments/assets/a8fbf05e-6ca6-413b-90c3-7416146527f2[image]

=== Quick Fixes

Just as you can create a class that doesn’t exist, you can create other
language elements. In this case, I created the object that was
referenced in the test step.

.image
image::https://github.com/user-attachments/assets/b7a81d5d-8e1f-4816-b271-42911d977195[image]

If I reference another object that has a similar name, I can rename it
to one that exists.

.image
image::https://github.com/user-attachments/assets/2f0613c1-a1fd-43ab-8c67-e3818b6e7775[image]

And if any new keywords don’t exist, you can create those as well.

.image
image::https://github.com/user-attachments/assets/feed8fa0-d871-4457-a4e9-6a7fea3e21dc[image]

=== Code Generation

Why are the missing object and keywords flagged as warnings and not
errors? It’s because they don’t get in the way validation of that file.
I could just ignore all those warnings and then use the Build Project
menu item and it’ll create everything at once.

.image
image::https://github.com/user-attachments/assets/47c34772-852f-484d-acc0-b473e51b1351[image]

=== Formatting

Formats everything including table cell contents. I’ll probably need a
GIF to demonstrate this.

=== Syntax Colouring

You can customise the colours in the code and through eclipse
preferences.

.image
image::https://github.com/user-attachments/assets/385c1b6c-de4d-4ce3-8098-5fd02a26d660[image]