= Usage

Everything you need to know to use the plug-ins should be here.
When creating this section, what I had in mind was the usage section of a Maven plug-in site.
Most of the .asciidoc files are converted to tests so you know that the examples are up-to-date though the screen captures might not be.

== Xtext

With my qa team, I was gradually trying to make the experience of writing test cases the same as coding.
That is, leveraging IDE features that make coding easier or writing in a language easier.
I've put these screenshots here to show how the custom DSL editor developed with Xtext compares to the Java editor in Eclipse. 

=== Content Assist

When I start writing tests I use content assist. You can customise the code to suggest whatever you want, like an entire test case. 
For example if you type out a comment, and ask for a suggestion by pressing CTRL{plus}SPACE.
You could use that comment to generate a test case using MBT or AI. I’ll probably implement that later.

==== Propose applications for which there are keywords

I'm not sure what the equivalent is in Java, I guess something that proposes a jar file to import?
Either ways, this suggests a list of applications or web-services or batch-jobs etc for which the team.

image::images/propose-applications-for-which-there-are-keywords.png[image]

==== Propose objects for that application

If you're familiar with a page object, this would list all objects for the last referenced component.

.image
image::images/propose-objects-for-that-application.png[image]

==== Propose keywords for that object

This is similar to a list of methods for a class or interface.

.image
image::images/propose-keywords-for-that-object.png[image]

==== Propose combinations of attributes for that keyword

This needs a longer explanation but the short story is that you might need to have a way to avoid an explosion of keywords.
That happens when you have so many fields on a web-page which allow many combinations. 
I wanted to demonstrate separating a keyword name from possible parameters kind of like overloading a method.

.image
image::images/propose-combinations-of-attributes-for-that-keyword.png[image]

==== Propose types for components and objects

.image
image::images/propose-types-for-components-and-objects.png[image]

=== Validation

When writing a new test step, you get feedback through validation as you type like referencing an object that doesn’t exist. 
The check can be a warning or an error. You can also trigger slower validation using the Validate menu item.

.image
image::images/validation.png[image]

==== Component and Object validation

All test steps need to specify the object and optionally its path and component. 
Think of this as specifying the fully qualified name of an object in the import statement.

TODO: I believe only the first step really needs to have a component specified and the rest are inferred but I can't find the test for that.

.image
image::images/component-and-object-validation-1.png[image]

.image
image::images/component-and-object-validation-2.png[image]

==== Predicate Validation

This is the remainder of the step, you can think of it as completing a method call.

.image
image::images/predicate-validatiion.png[image]

=== Quick Fixes

Just as you can create a class that doesn’t exist, you can create other language elements. 
In this case, I created the object that was referenced in the test step.

.image
image::images/quick-fixes-1.png[image]

If I reference another object that has a similar name, I can rename it to one that exists.

.image
image::images/quick-fixes-2.png[image]

And if any new keywords don’t exist, you can create those as well.

.image
image::images/quick-fixes-3.png[image]

=== Code Generation

.image
image::images/code-generation.png[image]

=== Formatting

Formats everything including table cell contents. I’ll probably need a GIF to demonstrate this.

=== Syntax Colouring

You can customise the colours in the code and through eclipse preferences.

.image
image::images/syntax-colouring.png[image]

== Maven

This is an example of how to convert .asciidoc files written by the editor into java code with cucumber and Guice
In this specific example, it's how the `sheep-dog-test` `src-gen/test` code is created

TODO: update the snippet below with the latest version.

* First the files are created in the `src/test/resources/asciidoc/specs` directory.

* Then the uml model is created by running the `forward-engineer.bat` script in the `sheep-dog-specs` project.
+
----
cd ..
call mvn clean
call mvn org.farhan:sheep-dog-dev-maven-plugin:1.26-SNAPSHOT:asciidoctor-to-uml -DrepoDir="" -Dtags="sheep-dog-dev"
call mvn org.farhan:sheep-dog-dev-maven-plugin:1.26-SNAPSHOT:asciidoctor-to-uml -DrepoDir="" -Dtags="sheep-dog-test"
call mvn org.farhan:sheep-dog-dev-maven-plugin:1.26-SNAPSHOT:asciidoctor-to-uml -DrepoDir="" -Dtags="round-trip"
cd scripts 
----

* This is some of the output of running the script. 
+
----
PS C:\Users\Farhan\git\sheep-dog-qa\sheep-dog-specs\scripts> .\forward-engineer.bat

C:\Users\Farhan\git\sheep-dog-qa\sheep-dog-specs\scripts>cd ..

C:\Users\Farhan\git\sheep-dog-qa\sheep-dog-specs>call mvn clean
...
[INFO] Scanning for projects...
[INFO] 
[INFO] ---------------------< org.farhan:sheep-dog-specs >---------------------
[INFO] Building sheep-dog-specs 1.0-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ pom ]---------------------------------
[INFO]
[INFO] --- sheep-dog-dev:1.26-SNAPSHOT:asciidoctor-to-uml (default-cli) @ sheep-dog-specs ---
[INFO] Starting execute
[INFO] tags: sheep-dog-test
[INFO] baseDir: C:\Users\Farhan\git\sheep-dog-qa\sheep-dog-specs
[INFO] repoDir:
[INFO] Ending execute
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  12.679 s
[INFO] Finished at: 2025-05-13T20:04:41-04:00
[INFO] ------------------------------------------------------------------------
----

* Then the code is generated by running the `forward-engineer.bat` script in the `sheep-dog-test` project.
+
----
cd ..
call mvn clean
call mvn org.farhan:sheep-dog-dev-maven-plugin:1.26-SNAPSHOT:uml-to-cucumber-guice -DrepoDir=../../sheep-dog-qa/sheep-dog-specs/ -Dtags="sheep-dog-test"
cd scripts
----

* This is the output of running the script.
+
----
PS C:\Users\Farhan\git\sheep-dog-local\sheep-dog-test\scripts> .\forward-engineer.bat

C:\Users\Farhan\git\sheep-dog-local\sheep-dog-test\scripts>cd .. 

C:\Users\Farhan\git\sheep-dog-local\sheep-dog-test>call mvn clean 
[INFO] Scanning for projects...
...
[INFO] ---------------------< org.farhan:sheep-dog-test >----------------------
[INFO] Building Lean Sheep Dog Tools for Testers 1.23-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- sheep-dog-dev:1.26-SNAPSHOT:uml-to-cucumber-guice (default-cli) @ sheep-dog-test ---
[INFO] Starting execute
[INFO] tags: sheep-dog-test
[INFO] baseDir: C:\Users\Farhan\git\sheep-dog-local\sheep-dog-test
[INFO] repoDir: ../../sheep-dog-qa/sheep-dog-specs/
[INFO] Ending execute
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  12.621 s
[INFO] Finished at: 2025-05-13T20:10:46-04:00
[INFO] ------------------------------------------------------------------------
----

* Finally the files are created in the `src-gen/test` directory.